#!/bin/bash
set -e

function run_mussel(){
  account_id=${account_id} mussel.sh $* ${mussel_opts}
}

function lsinst() {
  # state=(running|stopped|terminated|alive)
  local state=${1:-running}
  run_mussel ${namespace} index --state=${state} | grep :id: | awk '{print $3}'
}

function current_inst_num(){
  lsinst running | wc -l
}

function is_max_inst(){
  cur=$(current_inst_num)
  echo -n "c:${cur}=${max_inst}? " >&2
  #[[ ${max_inst} = ${cur} ]]
  [[ ${max_inst} -le ${cur} ]]
}

function is_zero_inst(){
  cur=$(current_inst_num)
  echo -n "c:${cur}=0? " >&2
  [[ 0 = ${cur} ]]
}

function retry_until() {
  local wait_sec=$1
  local func=$2

  local tries=0
  local start_at=$(date +%s)

  while :; do
    ${func} && {
      break
    } || {
      sleep 3
    }

    let ++tries
    if [[ $(($(date +%s) - ${start_at})) -gt ${wait_sec} ]]; then
      echo "Retry Failure: Exceed ${wait_sec} sec: Retried ${tries} times" >&2
      return 1
    fi
  done
}

function retry_until_max_inst(){
  retry_until ${retry_wait_sec} is_max_inst
}

function retry_until_zero_inst(){
  retry_until ${retry_wait_sec} is_zero_inst
}

function destroy_all(){
  do_command_all destroy alive
  sleep 3
  retry_until_zero_inst
  sleep 3
}

function do_command_all() {
  local command=$1 state=$2
  for inst_id in $(lsinst ${state}); do
    run_mussel ${namespace} ${command} ${inst_id}
  done
}

function create_all(){
  for i in {1..2}; do
    for inst_spec_name in ${instance_spec_names}; do
      echo ${inst_spec_name}
      create ${inst_spec_name}
    done
  done
  retry_until_max_inst
  sleep 3
}

function create() {
  local instance_spec_name=$1

   export MUSSEL_CUSTOM_DATA="
     --data-urlencode image_id=${image_id} \
     --data-urlencode instance_spec_name=${instance_spec_naem} \
     --data-urlencode security_groups[]=${security_groups} \
     --data-urlencode ssh_key_id=${ssh_key_id} \
     --data-urlencode hypervisor=${hypervisor} \
     --data-urlencode cpu_cores=${cpu_cores} \
     --data-urlencode memory_size=${memory_size} \
     --data-urlencode display_name= \
     --data-urlencode host_name= \
     --data-urlencode vifs[eth0][index]=0 \
     --data-urlencode vifs[eth0][network]=${network_id} \
  "
  run_mussel ${namespace} xcreate
}

function reboot_all(){
  do_command_all reboot running
  sleep 6
  retry_until_max_inst
  sleep 3
}

function set_instance_spec(){
  local hypervisor=$1
  case ${hypervisor} in
  kvm) instance_spec_prefix=kvm  ;;
  openvz) instance_spec_prefix=vz  ;;
  lxc) instance_spec_prefix=lxc  ;;
  esac

  instance_spec_name="${instance_spec_prefix}.small"
  instance_spec_names="${instance_spec_prefix}.small ${instance_spec_prefix}.large"
}

. $(dirname ${BASH_SOURCE[0]})/../lib/initializer.sh

base_dir=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
test_name=$(echo ${base_dir} | sed -e 's/.*\/test\.\(.*\)/\1/')
. ${base_dir}/config
config_file=$(eval echo '$KEMUMAKI_TEST_CONFIG_'$(uppercase ${test_name}))
[[ -f ${config_file} ]] && . ${config_file}

namespace=instance
image_id=${image_id:-wmi-centos1d}
hypervisor=${hypervisor:-openvz}
security_groups=${security_groups:-sg-aa9j5kqk}
ssh_key_id=${ssh_key_id:-ssh-demo}
cpu_cores=${cpu_cores:-1}
memory_size=${memory_size:-1024}
set_instance_spec $hypervisor

inst_states="
 running stopped terminated alive
"
mussel_opts="--host=${dcmgr_host} --port=${dcmgr_port}"
max_inst=4
retry_wait_sec=$((60 * 5))

destroy_all
create_all
reboot_all
destroy_all
