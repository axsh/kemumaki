#!/bin/bash

function checkroot() {
  #
  # Check if we're running as root, and bail out if we're not.
  #
  [[ "${UID}" -ne 0 ]] && {
    echo "[ERROR] Must run as root." >&2
    return 1
  } || :
}

function vdc_origin_url(){
  (cd ${vdc_dir} && git config --get remote.origin.url)
}

function update_vdc(){
  sync_repo ${vdc_repo_url} ${vdc_build_target:-${vdc_branch}} ${vdc_dir}
}

function sync_repo(){
  local repo_url=$1
  local target=$2
  local destination=$3
  [[ $# -eq 3 ]] || { echo "[ERROR] Wrong number of arguments $# for 3" >&2; return 1; }
  local revision=${target}
  cd ${destination}
  [[ "${target}" =~ ^[0-9a-f]{40}$ ]] || {
    revision=$(git ls-remote ${repo_url} ${target} | egrep "[0-9a-f]{40}[[:space:]]+refs/.*?/${target}" | cut -c1-40)
  }

  git fetch origin && git fetch --tags origin && git reset --hard ${revision}
  git submodule update --init
}

function prepare(){
  if [[ "${run_mode}" = standalone ]]; then
    [[ -d ${vdc_dir} ]] || {
      ( cd $(dirname ${vdc_dir}) && git clone ${vdc_repo_url} $(basename ${vdc_dir}) )
    }
  elif [[ "${run_mode}" = jenkins ]]; then
    vdc_repo_url=$(vdc_origin_url)
  fi
}

function rpmbuild(){
  echo "rpmbuild: started"
  [[ "${run_mode}" = jenkins ]] && [[ -z ${VDC_BUILD_TARGET} ]] || update_vdc
  trap "exit 1" ERR
  cd ${lib_dir}
  ./spot-build.sh ${vdc_dir} ${vdc_branch}
  trap - ERR
  echo "rpmbuild: done"
}

LANG=C
LC_ALL=C

set -e
set -o pipefail

exec > >(tee kemumaki.log) 2>&1

. $(dirname ${BASH_SOURCE[0]})/../lib/initializer.sh

[[ -n $1 ]] && {
  command=${1}
  shift
}

[[ "${command}" = update ]] || checkroot

prepare

case ${command} in
rpmbuild)
  rpmbuild
  ;;
*)
  echo "[ERROR] no such command: ${command}"
  exit 1
  ;;
esac
