#!/bin/bash

function checkroot() {
  #
  # Check if we're running as root, and bail out if we're not.
  #
  [[ "${UID}" -ne 0 ]] && {
    echo "[ERROR] Must run as root." >&2
    return 1
  } || :
}

function vdc_build_id(){
  cd ${vdc_dir}
  git log -n 1 --pretty=format:"%h"
}

function vdc_release_id(){
  cd ${vdc_dir}
  ./rpmbuild/helpers/gen-release-id.sh
}

function vdc_origin_url(){
  cd ${vdc_dir}
  git config --get remote.origin.url
}

function update_vdc(){
  sync_repo ${vdc_repo_url} ${vdc_build_target:-${vdc_branch}} ${vdc_dir}
}

function update_kemumaki(){
  sync_repo ${kemumaki_repo_url} ${kemumaki_branch} ${abs_dirname}
}

function sync_repo(){
  local repo_url=$1
  local target=$2
  local destination=$3
  [[ $# -eq 3 ]] || { echo "[ERROR] Wrong number of arguments $# for 3" >&2; return 1; }
  local revision=${target}
  cd ${destination}
  [[ "${target}" =~ ^[0-9a-f]{40}$ ]] || {
    revision=$(git ls-remote ${repo_url} ${target} | egrep "[0-9a-f]{40}[[:space:]]+refs/.*?/${target}" | cut -c1-40)
  }

  git fetch origin && git fetch --tags origin && git reset --hard ${revision}
  git submodule update --init
}

function prepare(){
  mkdir -p ${image_dir}
  mkdir -p ${tmp_dir}
  mkdir -p ${rpmbuild_tmp_dir}

  if [[ "${run_mode}" = standalone ]]; then
    [[ -d ${vdc_dir} ]] || {
      ( cd $(dirname ${vdc_dir}) && git clone ${vdc_repo_url} $(basename ${vdc_dir}) )
    }
  elif [[ "${run_mode}" = jenkins ]]; then
    vdc_repo_url=$(vdc_origin_url)
  fi
}

function notify(){
  [[ "${hipchat_notification}" = true ]] || return 0
  local message=$1
  # add jenkins build url
  [[ -z ${BUILD_URL} ]] || message="${BUILD_URL} ${message}"
  echo -e "${message} " | ${script_dir}/hipchat_room_message -t ${hipchat_token} -r ${hipchat_room_id} -f ${hipchat_from_name}
}

function notify_rpmbuild(){
  local state=${1:-unknown}
  local release_id=$(vdc_release_id)
  notify "rpmbuild: ${state}> ${vdc_branch} of ${vdc_repo_url} (${release_id})"
}

function rpmbuild(){
  echo "start rpmbuild"
  [[ "${run_mode}" = jenkins ]] && [[ -z ${VDC_BUILD_TARGET} ]] || update_vdc
  notify_rpmbuild started
  trap "notify_rpmbuild failed && return 1" ERR
  cd ${script_dir}
  ./setup-ci-env.sh setup_chroot_dir
  ./spot-build.sh ${vdc_dir}
  trap ERR
  notify_rpmbuild done
  echo "done: rpmbuild"
}

function setup(){
  local setup_dir=${abs_dirname}/setup.${KEMUMAKI_ENV}
  [[ -d ${setup_dir} ]] || setup_dir=${abs_dirname}/setup
  echo "setup: ${KEMUMAKI_ENV:-default}"
  ${setup_dir}/setup.sh $*
}

function run(){
  find -L ${abs_dirname}/tests-enabled -type f -name $1 | sort | while read file; do
    echo running $(basename $(dirname file))
    ${file}
  done
}

LANG=C
LC_ALL=C

set -e

exec > >(tee kemumaki.log) 2>&1

abs_dirname=$(cd $(dirname ${BASH_SOURCE[0]})/../ && pwd)
function_dir=${abs_dirname}/functions
config_dir=${KEMUMAKI_CONFIG_DIR:-${abs_dirname}/config}
. ${function_dir}/util.sh
load_config
set_debug

kemumaki_env=${KEMUMAKI_ENV:-shinjuku}
script_dir=${abs_dirname}/scripts
vdc_build_target=${VDC_BUILD_TARGET:-${vdc_build_target:-}}
image_dir=${abs_dirname}/images
tmp_dir=${abs_dirname}/tmp
rpmbuild_tmp_dir=${tmp_dir}/rpmbuild

# kemumaki
run_mode=${run_mode:-jenkins}
kemumaki_repo_url=${kemumaki_repo_url:-https://github.com/axsh/kemumaki.git}
kemumaki_branch=${KEMUMAKI_BRANCH:-${kemumaki_branch:-master}}

# hipchat
hipchat_notification=${HIPCHAT_NOTIFICATION:-${hipchat_notification:-false}}
hipchat_token=${HIPCHAT_TOKEN:-${hipchat_token:-}}
hipchat_room_id=${HIPCHAT_ROOM_ID:-${hipchat_room_id:-}}
hipchat_from_name=${HIPCHAT_FROM_NAME:-${hipchat_from_name:-}}

# vdc
vdc_repo_url=${VDC_REPO_URL:-${vdc_repo_url:-https://github.com/axsh/wakame-vdc.git}}
vdc_branch=${GIT_BRANCH:-${vdc_branch:-master}}
vdc_dir=${WORKSPACE:-${vdc_dir:-${abs_dirname}/wakame-vdc}}

[[ -n $1 ]] && {
  command=${1}
  shift
}

[[ "${command}" = update ]] || checkroot

prepare

case ${command} in
update)
  update_kemumaki
  exit 0
  ;;
rpmbuild)
  case $1 in
  clean)
    rm -rf ${rpmbuild_tmp_dir}
    exit 0
    ;;
  *)
    [[ -n $1 ]] && {
      vdc_build_target=$1
      shift
    }
    rpmbuild
    ;;
  esac
  ;;
setup)
  setup $*
  ;;
test)
  run test
  ;;
report)
  run report
  ;;
all)
  [[ -n $1 ]] && {
    vdc_build_target=$1
    shift
  }
  rpmbuild
  setup
  run test
  run report
  ;;
*)
  echo "[ERROR] no such command: ${command}"
  exit 1
  ;;
esac
