#!/bin/bash

set -e

function prepare(){
  mkdir -p ${image_dir}
  mkdir -p ${tmp_dir}
}

function load_config(){
  . ${config_dir}/kemumaki.conf
}

function generate_copy_file(){
  local vm_name=$1 vm_type=$2
  [[ -n "${vm_name}" ]] || { echo "[ERROR] Invalid argument: vm_name:${vm_name}" >&2; return 1; }
  [[ -n "${vm_type}" ]] || { echo "[ERROR] Invalid argument: vm_type:${vm_type}" >&2; return 1; }
  generate_hosts $1
  cat <<EOS > ${vmbuilder_data_dir}/${vm_type}/copy.txt
/root/.ssh/id_rsa.pub /root/.ssh/id_rsa.pub
${tmp_dir}/hosts /etc/hosts
EOS
}

function generate_hosts(){
  local hostname=$1
  [[ -n "${hostname}" ]] || { echo "[ERROR] Invalid argument: hostname:${hostname}" >&2; return 1; }
  cat <<EOS > ${tmp_dir}/hosts
127.0.0.1 localhost
127.0.0.1 ${hostname}
${amqp_host} amqp-server
${redis_host} redis-server
EOS
}

function checkroot() {
  #
  # Check if we're running as root, and bail out if we're not.
  #
  [[ "${UID}" -ne 0 ]] && {
    echo "[ERROR] Must run as root." >&2
    return 1
  } || :
}

function each_vm(){
  local function_names=($*)
  for f in ${function_names[*]}; do
    for name in ${vm_names[*]}; do
      load_config
      $f $name
    done
  done
  load_config
}

function check_vm(){
  for name in ${vm_names[*]}; do
    [[ "${name}" = $1 ]] && return 0
  done
  echo "[ERROR] '${1}' not found in '${vm_config_dir}'"
  return 1
}

function build_vm(){
  local name=$1
  . ${vm_config_dir}/${name}.vm
  local vm_dir=${vmbuilder_data_dir}/${vm_type}
  local copy=${vm_dir}/copy.txt
  local script=${vm_dir}/execscript.sh
  local rawfile=${image_dir}/${name}.raw

  check_vm ${name} || return 1

  echo "build_vm ${name}"

  generate_copy_file ${name} ${vm_type}

  ${vmbuilder_command} \
    --hostname=${name} \
    --rootsize=${rootsize:-8192} \
    --ip=${ipaddr} \
    --mask=${netmask} \
    --net=${network} \
    --gw=${gateway} \
    --dns=${dns} \
    --copy=${copy} \
    --execscript=${script} \
    --raw=${rawfile}
}

function start_vm(){
  local name=$1
  . ${vm_config_dir}/${name}.vm
  local image_path=${image_dir}/${name}.raw

  check_vm ${name} || return 1

  echo "start_vm ${name}"
  
  sudo ${kvm_ctl_command} start \
    --image-path=${image_path} \
    --vif_name=${name} \
    --vnc_port=$((${vnc_port} + ${node_id})) \
    --monitor_port=$((${monitor_port} + ${node_id})) \
    --serial_port=$((${serial_port} + ${node_id}))

  ${script_dir}/wait_for_ready.sh -h ${redis_host} ${name}
}

function stop_vm(){
  local name=$1
  . ${vm_config_dir}/${name}.vm
  local vifname=${name}
  check_vm ${name} || return 1

  echo "stop_vm ${name}"

  # cleanup known_hosts
  ssh-keygen -R "${ipaddr}"
  set +e
  ${kvm_ctl_command} stop --monitor_port=$((${monitor_port} + ${node_id}))
  set -e
}

function run(){
  find -L ${base_dir}/tests-enabled -type f -name $1 | sort | while read file; do
    echo running $(basename $(dirname file))
    ${file}
  done
}

export LC_ALL=C
export LANG=C

base_dir=$(cd $(dirname $0)/..; pwd)

[[ -f ${base_dir}/.kemumakirc ]] && . ${base_dir}/.kemumakirc || :

command=${1}
script_dir=${base_dir}/scripts
config_dir=${KEMUMAKI_CONFIG_DIR:-${base_dir}/config}
vm_config_dir=${config_dir}/vms
vmbuilder_data_dir=${base_dir}/builders
image_dir=${base_dir}/images
tmp_dir=${base_dir}/tmp
vmbuilder_dir=${base_dir}/vmbuilder
vmbuilder_command=${vmbuilder_dir}/kvm/rhel/6/vmbuilder.sh
kvm_ctl_command=${vmbuilder_dir}/kvm/rhel/6/misc/kvm-ctl.sh
vnc_port=${vnc_port:-1001}
monitor_port=${monitor_port:-4444}
serial_port=${serial_port:-5555}
brname=${brname:-br0}
netmask=${netmask:-255.255.255.0}
dns=${dns:-8.8.8.8}
vm_names=($(find ${vm_config_dir} -type f -name "*.vm" -exec basename {} \; | sed -e 's/\.vm//g'))

checkroot
load_config
prepare

case ${command} in
  build_vm)
    if [[ -n "${2}" ]]; then
      build_vm $2
    else
      each_vm build_vm
    fi
    ;;
  start_vm)
    if [[ -n "${2}" ]]; then
      start_vm $2
    else
      each_vm start_vm
    fi
    ;;
  stop_vm)
    if [[ -n "${2}" ]]; then
      stop_vm $2
    else
      each_vm stop_vm
    fi
    ;;
  test)
    run test
    ;;
  report)
    run report
    ;;
  *)
    each_vm stop_vm build_vm start_vm
    run test
    run report
    ;;
esac
