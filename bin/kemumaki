#!/bin/bash

function checkroot() {
  #
  # Check if we're running as root, and bail out if we're not.
  #
  [[ "${UID}" -ne 0 ]] && {
    echo "[ERROR] Must run as root." >&2
    return 1
  } || :
}

function update_path(){
  export PATH=$PATH:${vdc_dir}/client/mussel
}

function update_vdc(){
  sync_repo ${vdc_repo_url} ${vdc_build_target:-${vdc_branch}} ${vdc_dir}
}

function update_kemumaki(){
  sync_repo ${kemumaki_repo_url} ${kemumaki_branch} ${abs_dirname}
}

function sync_repo(){
  local repo_url=$1
  local target=$2
  local destination=$3
  [[ $# -eq 3 ]] || { echo "[ERROR] Wrong number of arguments $# for 3" >&2; return 1; }
  local revision=${target}
  cd ${destination}
  [[ "${target}" =~ ^[0-9a-f]{40}$ ]] || {
    revision=$(git ls-remote ${repo_url} ${target} | egrep "[0-9a-f]{40}[[:space:]]+refs/.*?/${target}" | cut -c1-40)
  }

  git fetch origin && git fetch --tags origin && git reset --hard ${revision}
  git submodule update --init
}

function prepare(){
  update_path

  if [[ "${run_mode}" = standalone ]]; then
    [[ -d ${vdc_dir} ]] || {
      ( cd $(dirname ${vdc_dir}) && git clone ${vdc_repo_url} $(basename ${vdc_dir}) )
    }
  elif [[ "${run_mode}" = jenkins ]]; then
    vdc_repo_url=$(vdc_origin_url)
  fi
}

function notify(){
  [[ "${hipchat_notification}" = true ]] || return 0
  local message=$1
  # add jenkins build url
  [[ -z ${BUILD_URL} ]] || message="${BUILD_URL} ${message}"
  echo -e "${message} " | ${lib_dir}/hipchat_room_message -t ${hipchat_token} -r ${hipchat_room_id} -f ${hipchat_from_name}
}

function notify_rpmbuild(){
  local state=${1:-unknown}
  notify "rpmbuild: ${state}> ${vdc_branch} of ${vdc_repo_url} ($(vdc_release_id))"
}

function rpmbuild(){
  echo "rpmbuild: started"
  [[ "${run_mode}" = jenkins ]] && [[ -z ${VDC_BUILD_TARGET} ]] || update_vdc
  notify_rpmbuild started
  trap "notify_rpmbuild failed && return 1" ERR
  cd ${lib_dir}
  ./setup-ci-env.sh setup_chroot_dir
  ./spot-build.sh ${vdc_dir}
  trap ERR
  notify_rpmbuild done
  echo "rpmbuild: done"
}

function setup(){
  local setup_dir=${abs_dirname}/setup.${KEMUMAKI_ENV}
  [[ -d ${setup_dir} ]] || setup_dir=${abs_dirname}/setup
  echo "setup: ${KEMUMAKI_ENV:-default}"
  ${setup_dir}/setup.sh $*
}

function run_tests(){
  [[ $# -ge 1 ]] || { echo "[ERROR] At least one test name must be specified." >&2; return 1; }
  local vdc_release_id=$(vdc_release_id)
  mkdir -p ${report_dir}/${vdc_release_id}
  echo "test: started"
  notify "test: started> ${vdc_branch} of ${vdc_repo_url} (${vdc_release_id})"
  local state="done"
  local result=
  local t=
  for t in $*; do
    local s="success"
    run_test ${t}
    [[ $? -eq 0 ]] || {
      s="failure"
      state="failed"
    }
    result="${result}${t}: ${s}\n"
    [[ -x "${abs_dirname}/test.${t}/report" ]] && {
      sleep 3
      run_report ${t} ${s}
    }
  done
  echo -e ${result} > ${report_dir}/${vdc_release_id}/summary.md
  local message="test: ${state}> ${vdc_branch} of ${vdc_repo_url} (${vdc_release_id})"
  [[ ${run_mode} = jenkins ]] && [[ -n ${JENKINS_URL} ]] && { message="${message} report: ${JENKINS_URL}reports/${vdc_release_id}/"; } || :
  notify "${message}"
  echo "test: done"
}

function run_test(){
  local name=${1}
  [[ -x "${abs_dirname}/test.${name}/test" ]] || { echo "[ERROR] Test not found: ${abs_dirname}/test.${name}/test" >&2; return 1; }
  echo "testing ${abs_dirname}/test.${name}/test"
  ${abs_dirname}/test.${name}/test
}

function run_report(){
  local name=${1}
  [[ -x "${abs_dirname}/test.${name}/report" ]] || { echo "[ERROR] Report not found: ${abs_dirname}/test.${name}/report" >&2; return 1; }
  local test_status=${2}
  echo "reporting ${abs_dirname}/test.${name}/report"
  ${abs_dirname}/test.${name}/report ${test_status}
}

function vmapp(){
  local dist_name=$1
  local dest_dir=$2
  [[ -n ${dist_name} ]] || dist_name=${vmapp_suite}
  [[ -n ${dest_dir} ]] || dest_dir=${vmapp_deploy_dir} 
  [[ -d ${vdc_dir} ]] || { echo "[ERROR] vdc_dir not found: ${vdc_dir}" >&2; return 1; }
  # build start
  [[ -d ${vdc_dir}/vmapp/${dist_name} ]] || { echo "[ERROR] not found suite, available values: \"$(find_suite)\"" >&2; return 1; }
  cd ${vdc_dir}/vmapp
  ${vdc_dir}/vmapp/build.sh ${dist_name}
  # deploy start
  deploy_vmdir ${dist_name} ${dest_dir}
}

function deploy_vmdir() {
  local source_dir=${vdc_dir}/vmapp/$1
  local deploy_base_dir=$2/vmapp/$1

  [[ -d ${source_dir} ]] || { echo "[ERROR] not found suite, available values: \"$(find_suite)\"" >&2; return 1; }
  [[ -d ${deploy_base_dir} ]] || mkdir -p ${deploy_base_dir}

  # remove oldest files until get storage available space
  while [ $(is_available_storage_space ${source_dir} ${deploy_base_dir}) = "false" ]; do
    local oldest_dir=$(get_oldest_dir ${deploy_base_dir})
    [[ -n ${oldest_dir} ]] || { echo "[ERROR] does not get available disk space: ${deploy_base_dir}" >&2; return 1; }
    remove_file "${deploy_base_dir}/${oldest_dir}"
  done

  local deploy_dir="${deploy_base_dir}/$(get_numeric_name)"
  [[ -d ${deploy_dir} ]] || mkdir -p ${deploy_dir}

  local file_name
  # move "*.gz", "*.raw" to deploy directory
  for file_name in $(ls ${source_dir}/{*.gz,*.raw}); do
    mv ${file_name} ${deploy_dir}
  done
  clean_dir ${deploy_base_dir}
}

function find_suite() {
#  local current=$(cd $(dirname $0);pwd)
  local current=${vdc_dir}/vmapp
  local suite_name dir_name
  # find image.ini below "vmapp" directory.(except for "test")
  for suite_name in $(ls $current/*/image.ini); do
    dir_name=$(dirname $suite_name)
    echo -n "${dir_name##*/} "
  done
}

function is_available_storage_space() {
  local source_files=$1 # directory or files
  local dest_path=$2
  local file_name source_size

  for file_name in ${source_files}; do
    let source_size="${source_size} + $(du -ks ${file_name} | awk '{print $1}')"
  done

  # get available size exactly from df output (delete '\n')
  local dest_available_size=$(df -k ${dest_path} | grep / | tr -d '\012' | awk '{print $4}')
  if [[ ${dest_available_size} -gt ${source_size} ]]; then
    echo "true"
  else
    echo "[WARN] does not have available disk space: ${dest_path}" >&2
    echo "false"
  fi
}

function get_oldest_dir() {
  local dir_name=$1
  [[ -d ${dir_name} ]] || { echo "[ERROR] not found directory: ${dir_name}" >&2; return 1; }
  echo $(ls -1rt ${dir_name} | head -n 1)
}

function get_numeric_name() {
  echo $(date '+%Y%m%d%H%M%S')
}

function remove_file() {
  rm -rf $1
  #echo "remove: $1"
}

function clean_dir() {
  local dir_name=$1

  [[ -d ${dir_name} ]] || { echo "[ERROR] not found directory: ${dir_name}" >&2; return 1; }
  local file_name
  for file_name in $(ls ${dir_name}); do
    # "ls -a1" output only "./" "../", delete directory
    if [[ $(ls -a1 ${dir_name}/${file_name} | wc -l) -le 2 ]]; then
      remove_file ${dir_name}/${file_name}
    fi
  done
}

LANG=C
LC_ALL=C

set -e

exec > >(tee kemumaki.log) 2>&1

. $(dirname ${BASH_SOURCE[0]})/../lib/initializer.sh

[[ -n $1 ]] && {
  command=${1}
  shift
}

[[ "${command}" = update ]] || checkroot

prepare

case ${command} in
update)
  update_kemumaki
  exit 0
  ;;
rpmbuild)
  case $1 in
  clean)
    rm -rf ${rpmbuild_tmp_dir}
    exit 0
    ;;
  *)
    [[ -n $1 ]] && {
      vdc_build_target=$1
      shift
    }
    rpmbuild
    ;;
  esac
  ;;
setup)
  setup $*
  ;;
test)
  run_tests $*
  ;;
vmapp)
  vmapp $*
  ;;
*)
  echo "[ERROR] no such command: ${command}"
  exit 1
  ;;
esac
